<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="icon" href="logo.jpg">
<title>Asset Registration</title>
<script type="module">
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-app.js";
import { getFirestore, collection, getDocs, addDoc, query, where } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";

// Firebase config
const firebaseConfig = {
  apiKey: "AIzaSyCtdmsd0gWLPqwNpRI2lpiif_FuG-PTHjQ",
  authDomain: "ao-asset.firebaseapp.com",
  projectId: "ao-asset",
  storageBucket: "ao-asset.firebasestorage.app",
  messagingSenderId: "406786910363",
  appId: "1:406786910363:web:1d837738aab6c6b9d73e3e",
  measurementId: "G-4H7RF76176"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Store locations globally
let locations = [];

// Fetch dropdown options
async function fetchOptions(subcollection) {
  const colRef = collection(db, 'dropdowns', 'options', subcollection);
  const snapshot = await getDocs(colRef);
  return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
}

// Populate dropdowns
async function populateDropdown(id, subcollection) {
  let options = await fetchOptions(subcollection);

  // Sort location properly
  if(subcollection === 'locations'){
    options.sort((a,b)=>{
      const [blockA,floorA] = a.name.match(/[A-Za-z]+|[0-9]+/g);
      const [blockB,floorB] = b.name.match(/[A-Za-z]+|[0-9]+/g);
      if(blockA !== blockB) return blockA.localeCompare(blockB);
      return parseInt(floorA)-parseInt(floorB);
    });
    locations = options; // save globally
    return;
  }

  const select = document.getElementById(id);
  select.innerHTML = "";
  options.forEach(opt => {
    const optionEl = document.createElement('option');
    optionEl.value = JSON.stringify(opt);
    optionEl.textContent = opt.name;
    select.appendChild(optionEl);
  });
}

// Add new dropdown item
async function addNewItem(subcollection, dropdownId) {
  let newName = prompt(`Enter new ${subcollection === 'assetNames' ? 'Asset Name' : subcollection}:`);
  if(!newName) return;
  newName = newName.trim();
  const existingOptions = await fetchOptions(subcollection);

  if(existingOptions.find(opt => opt.name.toLowerCase() === newName.toLowerCase())){
    alert(`${newName} already exists!`);
    return;
  }

  let newObj = { name: newName };

  // Asset Name auto short code (3 letters)
  if(subcollection === "assetNames"){
    let words = newName.split(/\s+/);
    let short = words.map(w => w[0].toUpperCase()).join('');
    if(short.length < 3){
      let extra = words[0].slice(1, 4 - short.length).toUpperCase();
      short += extra;
    } else if(short.length > 3){
      short = short.slice(0,3);
    }

    let existingShorts = existingOptions.map(o => o.short).filter(s => s);
    let count = 1;
    let originalShort = short;
    while(existingShorts.includes(short)){
      short = originalShort + count;
      count++;
    }
    newObj.short = short;
  }

  await addDoc(collection(db, 'dropdowns', 'options', subcollection), newObj);
  alert(`${newName} added${newObj.short ? ` with short code ${newObj.short}` : ''}`);
  await populateDropdown(dropdownId, subcollection);
}

// Generate asset code
async function generateAssetCode(assetShort, locationShort){
  const q = query(collection(db, 'assets'), where('assetShort','==',assetShort));
  const snapshot = await getDocs(q);
  const count = snapshot.size + 1;
  return `AO-${assetShort}-${locationShort}-${count.toString().padStart(3,'0')}`;
}

// Update generated asset code
async function updateGeneratedCode() {
  const assetSel = document.getElementById('assetName').value ? JSON.parse(document.getElementById('assetName').value) : null;
  const locationSel = document.getElementById('locationInput').dataset.selectedValue ? JSON.parse(document.getElementById('locationInput').dataset.selectedValue) : null;
  if(!assetSel || !locationSel) {
    document.getElementById('generatedCode').textContent = "";
    return;
  }
  const code = await generateAssetCode(assetSel.short, locationSel.short);
  document.getElementById('generatedCode').textContent = `Generated Asset Code: ${code}`;
}

// Submit asset
async function submitAsset(){
  document.getElementById('loadingOverlay').style.display = 'flex';

  const assetSel = document.getElementById('assetName').value ? JSON.parse(document.getElementById('assetName').value) : null;
  const categorySel = document.getElementById('category').value ? JSON.parse(document.getElementById('category').value) : null;
  const manufacturerSel = document.getElementById('manufacturer').value ? JSON.parse(document.getElementById('manufacturer').value) : null;
  const modelSel = document.getElementById('model').value ? JSON.parse(document.getElementById('model').value) : null;
  const installationDate = document.getElementById('installationDate').value;
  const locationSel = document.getElementById('locationInput').dataset.selectedValue ? JSON.parse(document.getElementById('locationInput').dataset.selectedValue) : null;
  const amcVendor = document.getElementById('amcVendor').value;
  const remarkSel = document.getElementById('remarks').value ? JSON.parse(document.getElementById('remarks').value) : null;
  const amcStart = document.getElementById('amcStart').value;
  const amcEnd = document.getElementById('amcEnd').value;

  if(!assetSel || !categorySel || !manufacturerSel || !modelSel || !installationDate || !locationSel || !amcVendor || !remarkSel){
    alert("Please fill all mandatory fields.");
    document.getElementById('loadingOverlay').style.display = 'none';
    return;
  }

  // Optional AMC dates
  const amcStartVal = amcStart || "N/A";
  const amcEndVal = amcEnd || "N/A";

  const assetCode = await generateAssetCode(assetSel.short, locationSel.short);

  await addDoc(collection(db, 'assets'), {
    assetCode,
    assetName: assetSel.name,
    assetShort: assetSel.short,
    category: categorySel.name,
    manufacturer: manufacturerSel.name,
    model: modelSel.name,
    installationDate,
    location: locationSel.name,
    locationShort: locationSel.short,
    amcVendor,
    remark: remarkSel.name,
    amcStart: amcStartVal,
    amcEnd: amcEndVal
  });

  alert(`Asset Registered! Code: ${assetCode}`);
  document.getElementById('assetForm').reset();
  document.getElementById('generatedCode').textContent = "";
  document.getElementById('locationDropdown').innerHTML = "";
  document.getElementById('locationInput').dataset.selectedValue = "";
  document.getElementById('loadingOverlay').style.display = 'none';
}

function setupLocationDropdown(){
  const input = document.getElementById('locationInput');
  const dropdown = document.getElementById('locationDropdown');

  function filterLocations(){
    const value = input.value.toLowerCase().trim();
    const parts = value.split(/\s+/); // split by space
    const filtered = locations.filter(loc => {
      const locStr = loc.name.toLowerCase().replace(/\s+/g, '');
      return parts.every(p => locStr.includes(p.replace(/\s+/g, '')));
    });

    dropdown.innerHTML = "";
    filtered.forEach(loc => {
      const li = document.createElement('li');
      li.className = "px-2 py-1 hover:bg-blue-600 cursor-pointer";

      let displayName = loc.name;
      parts.forEach(p => {
        const regex = new RegExp(`(${p})`, 'i');
        displayName = displayName.replace(regex, '<span class="bg-yellow-400 text-black">$1</span>');
      });
      li.innerHTML = displayName;

      li.onclick = () => {
        input.value = loc.name;
        input.dataset.selectedValue = JSON.stringify(loc);
        dropdown.classList.add('hidden');
        updateGeneratedCode();
      };
      dropdown.appendChild(li);
    });

    dropdown.classList.remove('hidden');
  }

  input.addEventListener('input', filterLocations);
  input.addEventListener('focus', filterLocations);

  document.addEventListener('click', (e)=>{
    if(!input.contains(e.target) && !dropdown.contains(e.target)){
      dropdown.classList.add('hidden');
      if(!locations.find(loc => loc.name === input.value)){
        input.value = "";
        input.dataset.selectedValue = "";
        updateGeneratedCode();
      }
    }
  });
}

// Load dropdowns
window.addEventListener('DOMContentLoaded', async () => {
  await populateDropdown('assetName','assetNames');
  await populateDropdown('category','categories');
  await populateDropdown('manufacturer','manufacturers');
  await populateDropdown('model','models');
  await populateDropdown('location','locations');
  await populateDropdown('remarks','remarks');

  document.getElementById('assetName').addEventListener('change', updateGeneratedCode);
  setupLocationDropdown();
});

window.addNewItem = addNewItem;
window.submitAsset = submitAsset;
window.updateGeneratedCode = updateGeneratedCode;
</script>
<script src="https://cdn.tailwindcss.com"></script>
<style>
body {
  background: linear-gradient(135deg, #010d23, #011e50);
}
</style>
</head>
<body class="flex flex-col items-center justify-start min-h-screen p-4 text-white">
  <!-- Mobile Back Button -->
  <div class="fixed back-btn-mobile z-50 md:hidden">
    <a href="dashboard.html" class="flex items-center gap-2 px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-lg font-semibold shadow-lg text-sm">
      ‚Æê Back
    </a>
  </div>

  <div class="w-full max-w-xl relative">
    <div class="bg-gradient-to-b from-[#010d23] to-[#011e50] p-8 rounded shadow-md w-full">
      <h1 class="text-2xl font-bold mb-6 text-center text-blue-300">Asset Registration</h1>
      <form id="assetForm" class="space-y-4" onsubmit="event.preventDefault(); submitAsset();">

        <!-- Asset Name -->
        <div>
          <label class="block font-medium mb-1">Asset Name</label>
          <div class="flex space-x-2">
            <select id="assetName" class="border p-2 flex-1 rounded bg-[#011a3b] text-white"></select>
            <button type="button" onclick="addNewItem('assetNames','assetName')" class="bg-green-600 text-white px-3 rounded font-bold text-lg">+</button>
          </div>
        </div>

        <!-- Category -->
        <div>
          <label class="block font-medium mb-1">Category</label>
          <div class="flex space-x-2">
            <select id="category" class="border p-2 flex-1 rounded bg-[#011a3b] text-white"></select>
            <button type="button" onclick="addNewItem('categories','category')" class="bg-green-600 text-white px-3 rounded font-bold text-lg">+</button>
          </div>
        </div>

        <!-- Manufacturer -->
        <div>
          <label class="block font-medium mb-1">Manufacturer</label>
          <div class="flex space-x-2">
            <select id="manufacturer" class="border p-2 flex-1 rounded bg-[#011a3b] text-white"></select>
            <button type="button" onclick="addNewItem('manufacturers','manufacturer')" class="bg-green-600 text-white px-3 rounded font-bold text-lg">+</button>
          </div>
        </div>

        <!-- Model/Serial No -->
        <div>
          <label class="block font-medium mb-1">Model / Serial No</label>
          <div class="flex space-x-2">
            <select id="model" class="border p-2 flex-1 rounded bg-[#011a3b] text-white"></select>
            <button type="button" onclick="addNewItem('models','model')" class="bg-green-600 text-white px-3 rounded font-bold text-lg">+</button>
          </div>
        </div>

        <!-- Installation Date -->
        <div>
          <label class="block font-medium mb-1">Installation Date</label>
          <input type="date" id="installationDate" class="border p-2 w-full rounded bg-[#011a3b] text-white">
        </div>

        <!-- Location -->
        <div class="relative">
          <label class="block font-medium mb-1">Location</label>
          <input type="text" id="locationInput" class="border p-2 w-full rounded bg-[#011a3b] text-white" placeholder="Select location">
          <ul id="locationDropdown" class="absolute z-50 w-full bg-[#011a3b] text-white border rounded max-h-48 overflow-y-auto hidden"></ul>
        </div>

        <!-- AMC Vendor -->
        <div>
          <label class="block font-medium mb-1">AMC Vendor</label>
          <input type="text" id="amcVendor" placeholder="Enter AMC Vendor" class="border p-2 w-full rounded bg-[#011a3b] text-white">
        </div>

        <!-- Remarks -->
        <div>
          <label class="block font-medium mb-1">Remarks</label>
          <div class="flex space-x-2">
            <select id="remarks" class="border p-2 flex-1 rounded bg-[#011a3b] text-white"></select>
            <button type="button" onclick="addNewItem('remarks','remarks')" class="bg-green-600 text-white px-3 rounded font-bold text-lg">+</button>
          </div>
        </div>

        <!-- AMC Start/End -->
        <div class="flex flex-col md:flex-row md:space-x-2">
          <div class="flex-1">
            <label class="block font-medium mb-1">AMC Start Date</label>
            <input type="date" id="amcStart" class="border p-2 w-full rounded bg-[#011a3b] text-white">
          </div>
          <div class="flex-1">
            <label class="block font-medium mb-1">AMC End Date</label>
            <input type="date" id="amcEnd" class="border p-2 w-full rounded bg-[#011a3b] text-white">
          </div>
        </div>

        <!-- Generated Asset Code -->
        <div id="generatedCode" class="text-center font-bold text-lg mb-4 text-blue-300"></div>

        <!-- Submit -->
        <button type="submit" class="w-full bg-blue-600 text-white p-2 rounded font-bold hover:bg-blue-700">Register Asset</button>
      </form>
    </div>

    <!-- Loading overlay -->
    <div id="loadingOverlay" class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center text-white text-xl hidden">
      Registering asset...
    </div>
  </div>
</body>
</html>
